{"ast":null,"code":"/**\n * axios封装\n * 请求拦截、响应拦截、错误统一处理\n */\nimport axios from 'axios';\nimport router from '@/router';\nimport store from '@/store'; //  import { Toast } from 'vant';\n\n/** \n * 提示函数 \n * 禁止点击蒙层、显示一秒后关闭\n */\n//  const tip = msg => {    \n//      Toast({        \n//          message: msg,        \n//          duration: 1000,        \n//          forbidClick: true    \n//      });\n//  }\n\n/** \n * 跳转登录页\n * 携带当前页面路由，以期在登录页面完成登录后返回当前页面\n */\n\nconst toLogin = () => {\n  router.replace({\n    path: '/login',\n    query: {\n      redirect: router.currentRoute.fullPath\n    }\n  });\n};\n/** \n * 请求失败后的错误统一处理 \n * @param {Number} status 请求失败的状态码\n */\n\n\nconst errorHandle = (status, other) => {\n  // 状态码判断\n  switch (status) {\n    // 401: 未登录状态，跳转登录页\n    case 401:\n      toLogin();\n      break;\n    // 403 token过期\n    // 清除token并跳转登录页\n\n    case 403:\n      // tip('登录过期，请重新登录');\n      localStorage.removeItem('token');\n      store.commit('loginSuccess', null);\n      setTimeout(() => {\n        toLogin();\n      }, 1000);\n      break;\n    // 404请求不存在\n\n    case 404:\n      // tip('请求的资源不存在');\n      break;\n\n    default:\n      console.log(other);\n  }\n}; // 创建axios实例\n\n\nvar instance = axios.create({\n  timeout: 1000 * 12,\n  baseURL: '/api'\n}); // 设置post请求头\n\ninstance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n/** \n * 请求拦截器 \n * 每次请求前，如果存在token则在请求头中携带token \n */\n\ninstance.interceptors.request.use(config => {\n  // 登录流程控制中，根据本地是否存在token判断用户的登录情况        \n  // 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token        \n  // 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码        \n  // 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。        \n  const token = store.state.token;\n  token && (config.headers.Authorization = token);\n  return config;\n}, error => Promise.error(error)); // 响应拦截器\n\ninstance.interceptors.response.use( // 请求成功\nres => res.status === 200 ? Promise.resolve(res.data) : Promise.reject(res), // 请求失败\nerror => {\n  const {\n    response\n  } = error;\n\n  if (response) {\n    // 请求已发出，但是不在2xx的范围 \n    errorHandle(response.status, response.data.message);\n    return Promise.reject(response);\n  } else {\n    // 处理断网的情况\n    // eg:请求超时或断网时，更新state的network状态\n    // network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏\n    // 关于断网组件中的刷新重新获取数据，会在断网组件中说明\n    if (!window.navigator.onLine) {\n      store.commit('changeNetwork', false);\n    } else {\n      return Promise.reject(error);\n    }\n  }\n});\nexport default instance;","map":{"version":3,"names":["axios","router","store","toLogin","replace","path","query","redirect","currentRoute","fullPath","errorHandle","status","other","localStorage","removeItem","commit","setTimeout","console","log","instance","create","timeout","baseURL","defaults","headers","post","interceptors","request","use","config","token","state","Authorization","error","Promise","response","res","resolve","data","reject","message","window","navigator","onLine"],"sources":["/www/wwwroot/admin/src/utils/request.js"],"sourcesContent":["/**\n * axios封装\n * 请求拦截、响应拦截、错误统一处理\n */\nimport axios from 'axios';\nimport router from '@/router';\nimport store from '@/store';\n//  import { Toast } from 'vant';\n\n/** \n * 提示函数 \n * 禁止点击蒙层、显示一秒后关闭\n */\n//  const tip = msg => {    \n//      Toast({        \n//          message: msg,        \n//          duration: 1000,        \n//          forbidClick: true    \n//      });\n//  }\n\n/** \n * 跳转登录页\n * 携带当前页面路由，以期在登录页面完成登录后返回当前页面\n */\nconst toLogin = () => {\n    router.replace({\n        path: '/login',\n        query: {\n            redirect: router.currentRoute.fullPath\n        }\n    });\n}\n\n/** \n * 请求失败后的错误统一处理 \n * @param {Number} status 请求失败的状态码\n */\nconst errorHandle = (status, other) => {\n    // 状态码判断\n    switch (status) {\n        // 401: 未登录状态，跳转登录页\n        case 401:\n            toLogin();\n            break;\n        // 403 token过期\n        // 清除token并跳转登录页\n        case 403:\n            // tip('登录过期，请重新登录');\n            localStorage.removeItem('token');\n            store.commit('loginSuccess', null);\n            setTimeout(() => {\n                toLogin();\n            }, 1000);\n            break;\n        // 404请求不存在\n        case 404:\n            // tip('请求的资源不存在');\n            break;\n        default:\n            console.log(other);\n    }\n}\n\n// 创建axios实例\nvar instance = axios.create({ timeout: 1000 * 12, baseURL: '/api' });\n// 设置post请求头\ninstance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\n/** \n * 请求拦截器 \n * 每次请求前，如果存在token则在请求头中携带token \n */\ninstance.interceptors.request.use(\n    config => {\n        // 登录流程控制中，根据本地是否存在token判断用户的登录情况        \n        // 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token        \n        // 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码        \n        // 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。        \n        const token = store.state.token;\n        token && (config.headers.Authorization = token);\n        return config;\n    },\n    error => Promise.error(error))\n\n// 响应拦截器\ninstance.interceptors.response.use(\n    // 请求成功\n    res => res.status === 200 ? Promise.resolve(res.data) : Promise.reject(res),\n    // 请求失败\n    error => {\n        const { response } = error;\n        if (response) {\n            // 请求已发出，但是不在2xx的范围 \n            errorHandle(response.status, response.data.message);\n            return Promise.reject(response);\n        } else {\n            // 处理断网的情况\n            // eg:请求超时或断网时，更新state的network状态\n            // network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏\n            // 关于断网组件中的刷新重新获取数据，会在断网组件中说明\n            if (!window.navigator.onLine) {\n                store.commit('changeNetwork', false);\n            } else {\n                return Promise.reject(error);\n            }\n        }\n    });\n\nexport default instance;"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,MAAM;EAClBF,MAAM,CAACG,OAAP,CAAe;IACXC,IAAI,EAAE,QADK;IAEXC,KAAK,EAAE;MACHC,QAAQ,EAAEN,MAAM,CAACO,YAAP,CAAoBC;IAD3B;EAFI,CAAf;AAMH,CAPD;AASA;AACA;AACA;AACA;;;AACA,MAAMC,WAAW,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;EACnC;EACA,QAAQD,MAAR;IACI;IACA,KAAK,GAAL;MACIR,OAAO;MACP;IACJ;IACA;;IACA,KAAK,GAAL;MACI;MACAU,YAAY,CAACC,UAAb,CAAwB,OAAxB;MACAZ,KAAK,CAACa,MAAN,CAAa,cAAb,EAA6B,IAA7B;MACAC,UAAU,CAAC,MAAM;QACbb,OAAO;MACV,CAFS,EAEP,IAFO,CAAV;MAGA;IACJ;;IACA,KAAK,GAAL;MACI;MACA;;IACJ;MACIc,OAAO,CAACC,GAAR,CAAYN,KAAZ;EApBR;AAsBH,CAxBD,C,CA0BA;;;AACA,IAAIO,QAAQ,GAAGnB,KAAK,CAACoB,MAAN,CAAa;EAAEC,OAAO,EAAE,OAAO,EAAlB;EAAsBC,OAAO,EAAE;AAA/B,CAAb,CAAf,C,CACA;;AACAH,QAAQ,CAACI,QAAT,CAAkBC,OAAlB,CAA0BC,IAA1B,CAA+B,cAA/B,IAAiD,mCAAjD;AAEA;AACA;AACA;AACA;;AACAN,QAAQ,CAACO,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACIC,MAAM,IAAI;EACN;EACA;EACA;EACA;EACA,MAAMC,KAAK,GAAG5B,KAAK,CAAC6B,KAAN,CAAYD,KAA1B;EACAA,KAAK,KAAKD,MAAM,CAACL,OAAP,CAAeQ,aAAf,GAA+BF,KAApC,CAAL;EACA,OAAOD,MAAP;AACH,CATL,EAUII,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAVb,E,CAYA;;AACAd,QAAQ,CAACO,YAAT,CAAsBS,QAAtB,CAA+BP,GAA/B,EACI;AACAQ,GAAG,IAAIA,GAAG,CAACzB,MAAJ,KAAe,GAAf,GAAqBuB,OAAO,CAACG,OAAR,CAAgBD,GAAG,CAACE,IAApB,CAArB,GAAiDJ,OAAO,CAACK,MAAR,CAAeH,GAAf,CAF5D,EAGI;AACAH,KAAK,IAAI;EACL,MAAM;IAAEE;EAAF,IAAeF,KAArB;;EACA,IAAIE,QAAJ,EAAc;IACV;IACAzB,WAAW,CAACyB,QAAQ,CAACxB,MAAV,EAAkBwB,QAAQ,CAACG,IAAT,CAAcE,OAAhC,CAAX;IACA,OAAON,OAAO,CAACK,MAAR,CAAeJ,QAAf,CAAP;EACH,CAJD,MAIO;IACH;IACA;IACA;IACA;IACA,IAAI,CAACM,MAAM,CAACC,SAAP,CAAiBC,MAAtB,EAA8B;MAC1BzC,KAAK,CAACa,MAAN,CAAa,eAAb,EAA8B,KAA9B;IACH,CAFD,MAEO;MACH,OAAOmB,OAAO,CAACK,MAAR,CAAeN,KAAf,CAAP;IACH;EACJ;AACJ,CArBL;AAuBA,eAAed,QAAf"},"metadata":{},"sourceType":"module"}