{"ast":null,"code":"import { defineComponent, toRefs, computed, createVNode, mergeProps } from \"vue\";\nimport { getPrefixCls } from \"../_utils/global-config.js\";\nimport Base from \"./base.js\";\nvar TypographyParagraph = defineComponent({\n  name: \"TypographyParagraph\",\n  inheritAttrs: false,\n  props: {\n    blockquote: {\n      type: Boolean\n    },\n    spacing: {\n      type: String,\n      default: \"default\"\n    }\n  },\n\n  setup(props) {\n    const {\n      blockquote,\n      spacing\n    } = toRefs(props);\n    const prefixCls = getPrefixCls(\"typography\");\n    const component = computed(() => (blockquote == null ? void 0 : blockquote.value) ? \"blockquote\" : \"div\");\n    const classNames = computed(() => [{\n      [`${prefixCls}-spacing-close`]: (spacing == null ? void 0 : spacing.value) === \"close\"\n    }]);\n    return {\n      component,\n      classNames\n    };\n  },\n\n  render() {\n    const {\n      component,\n      classNames\n    } = this;\n    return createVNode(Base, mergeProps({\n      \"class\": classNames\n    }, this.$attrs, {\n      \"component\": component\n    }), this.$slots);\n  }\n\n});\nexport { TypographyParagraph as default };","map":{"version":3,"names":["defineComponent","toRefs","computed","createVNode","mergeProps","getPrefixCls","Base","TypographyParagraph","name","inheritAttrs","props","blockquote","type","Boolean","spacing","String","default","setup","prefixCls","component","value","classNames","render","$attrs","$slots"],"sources":["/www/wwwroot/admin/node_modules/@arco-design/web-vue/es/typography/paragraph.js"],"sourcesContent":["import { defineComponent, toRefs, computed, createVNode, mergeProps } from \"vue\";\nimport { getPrefixCls } from \"../_utils/global-config.js\";\nimport Base from \"./base.js\";\nvar TypographyParagraph = defineComponent({\n  name: \"TypographyParagraph\",\n  inheritAttrs: false,\n  props: {\n    blockquote: {\n      type: Boolean\n    },\n    spacing: {\n      type: String,\n      default: \"default\"\n    }\n  },\n  setup(props) {\n    const {\n      blockquote,\n      spacing\n    } = toRefs(props);\n    const prefixCls = getPrefixCls(\"typography\");\n    const component = computed(() => (blockquote == null ? void 0 : blockquote.value) ? \"blockquote\" : \"div\");\n    const classNames = computed(() => [{\n      [`${prefixCls}-spacing-close`]: (spacing == null ? void 0 : spacing.value) === \"close\"\n    }]);\n    return {\n      component,\n      classNames\n    };\n  },\n  render() {\n    const {\n      component,\n      classNames\n    } = this;\n    return createVNode(Base, mergeProps({\n      \"class\": classNames\n    }, this.$attrs, {\n      \"component\": component\n    }), this.$slots);\n  }\n});\nexport { TypographyParagraph as default };\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,MAA1B,EAAkCC,QAAlC,EAA4CC,WAA5C,EAAyDC,UAAzD,QAA2E,KAA3E;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,IAAIC,mBAAmB,GAAGP,eAAe,CAAC;EACxCQ,IAAI,EAAE,qBADkC;EAExCC,YAAY,EAAE,KAF0B;EAGxCC,KAAK,EAAE;IACLC,UAAU,EAAE;MACVC,IAAI,EAAEC;IADI,CADP;IAILC,OAAO,EAAE;MACPF,IAAI,EAAEG,MADC;MAEPC,OAAO,EAAE;IAFF;EAJJ,CAHiC;;EAYxCC,KAAK,CAACP,KAAD,EAAQ;IACX,MAAM;MACJC,UADI;MAEJG;IAFI,IAGFb,MAAM,CAACS,KAAD,CAHV;IAIA,MAAMQ,SAAS,GAAGb,YAAY,CAAC,YAAD,CAA9B;IACA,MAAMc,SAAS,GAAGjB,QAAQ,CAAC,MAAM,CAACS,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACS,KAA1C,IAAmD,YAAnD,GAAkE,KAAzE,CAA1B;IACA,MAAMC,UAAU,GAAGnB,QAAQ,CAAC,MAAM,CAAC;MACjC,CAAE,GAAEgB,SAAU,gBAAd,GAAgC,CAACJ,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACM,KAApC,MAA+C;IAD9C,CAAD,CAAP,CAA3B;IAGA,OAAO;MACLD,SADK;MAELE;IAFK,CAAP;EAID,CA1BuC;;EA2BxCC,MAAM,GAAG;IACP,MAAM;MACJH,SADI;MAEJE;IAFI,IAGF,IAHJ;IAIA,OAAOlB,WAAW,CAACG,IAAD,EAAOF,UAAU,CAAC;MAClC,SAASiB;IADyB,CAAD,EAEhC,KAAKE,MAF2B,EAEnB;MACd,aAAaJ;IADC,CAFmB,CAAjB,EAId,KAAKK,MAJS,CAAlB;EAKD;;AArCuC,CAAD,CAAzC;AAuCA,SAASjB,mBAAmB,IAAIS,OAAhC"},"metadata":{},"sourceType":"module"}