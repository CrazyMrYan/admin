{"ast":null,"code":"function SetAdd(set) {\n  return Set.prototype.add.bind(set);\n}\n\nfunction SetDelete(set) {\n  return Set.prototype.delete.bind(set);\n}\n\nfunction isNodeCheckable(node) {\n  if (node.disabled || node.disableCheckbox) return false;\n  return !!node.checkable;\n}\n\nfunction getChildrenKeys(node) {\n  var _a;\n\n  const keys = [];\n  (_a = node.children) == null ? void 0 : _a.forEach(child => {\n    if (isNodeCheckable(child)) {\n      keys.push(child.key, ...getChildrenKeys(child));\n    }\n  });\n  return keys;\n}\n\nfunction updateParent(options) {\n  var _a;\n\n  const {\n    node,\n    checkedKeySet,\n    indeterminateKeySet\n  } = options;\n  let parentNode = node.parent;\n\n  while (parentNode) {\n    if (isNodeCheckable(parentNode)) {\n      const parentKey = parentNode.key;\n      const children = ((_a = parentNode.children) == null ? void 0 : _a.filter(isNodeCheckable)) || [];\n      let checkedCount = 0;\n      const total = children.length;\n      children.some(({\n        key: childKey\n      }) => {\n        if (checkedKeySet.has(childKey)) {\n          checkedCount += 1;\n        } else if (indeterminateKeySet.has(childKey)) {\n          checkedCount += 0.5;\n          return true;\n        }\n\n        return false;\n      });\n\n      if (checkedCount && checkedCount !== total) {\n        indeterminateKeySet.add(parentKey);\n      } else {\n        indeterminateKeySet.delete(parentKey);\n      }\n\n      if (checkedCount && checkedCount === total) {\n        checkedKeySet.add(parentKey);\n      } else {\n        checkedKeySet.delete(parentKey);\n      }\n    }\n\n    parentNode = parentNode.parent;\n  }\n}\n\nfunction getCheckedStateByCheck(options) {\n  const {\n    node,\n    checked,\n    checkedKeys,\n    indeterminateKeys,\n    checkStrictly = false\n  } = options;\n  const {\n    key\n  } = node;\n  const checkedKeySet = new Set(checkedKeys);\n  const indeterminateKeySet = new Set(indeterminateKeys);\n  checked ? checkedKeySet.add(key) : checkedKeySet.delete(key);\n  indeterminateKeySet.delete(key);\n\n  if (!checkStrictly) {\n    const childKeys = getChildrenKeys(node);\n\n    if (checked) {\n      childKeys.forEach(SetAdd(checkedKeySet));\n    } else {\n      childKeys.forEach(SetDelete(checkedKeySet));\n    }\n\n    childKeys.forEach(SetDelete(indeterminateKeySet));\n    updateParent({\n      node,\n      checkedKeySet,\n      indeterminateKeySet\n    });\n  }\n\n  return [[...checkedKeySet], [...indeterminateKeySet]];\n}\n\nfunction getCheckedStateByInitKeys(options) {\n  const {\n    initCheckedKeys,\n    key2TreeNode,\n    checkStrictly,\n    onlyCheckLeaf\n  } = options;\n  const checkedKeySet = new Set();\n  const childCheckedKeySet = new Set();\n  const indeterminateKeySet = new Set();\n\n  if (!checkStrictly) {\n    initCheckedKeys.forEach(key => {\n      var _a;\n\n      const node = key2TreeNode.get(key);\n\n      if (!node || childCheckedKeySet.has(key) || onlyCheckLeaf && ((_a = node.children) == null ? void 0 : _a.length)) {\n        return;\n      }\n\n      const childKeys = getChildrenKeys(node);\n      childKeys.forEach(SetAdd(childCheckedKeySet));\n      childKeys.forEach(SetDelete(indeterminateKeySet));\n      checkedKeySet.add(key);\n      indeterminateKeySet.delete(key);\n      updateParent({\n        node,\n        checkedKeySet,\n        indeterminateKeySet\n      });\n    });\n  } else {\n    initCheckedKeys.forEach(SetAdd(checkedKeySet));\n  }\n\n  return [[...checkedKeySet, ...childCheckedKeySet], [...indeterminateKeySet]];\n}\n\nexport { getCheckedStateByCheck, getCheckedStateByInitKeys, isNodeCheckable };","map":{"version":3,"names":["SetAdd","set","Set","prototype","add","bind","SetDelete","delete","isNodeCheckable","node","disabled","disableCheckbox","checkable","getChildrenKeys","_a","keys","children","forEach","child","push","key","updateParent","options","checkedKeySet","indeterminateKeySet","parentNode","parent","parentKey","filter","checkedCount","total","length","some","childKey","has","getCheckedStateByCheck","checked","checkedKeys","indeterminateKeys","checkStrictly","childKeys","getCheckedStateByInitKeys","initCheckedKeys","key2TreeNode","onlyCheckLeaf","childCheckedKeySet","get"],"sources":["/www/wwwroot/admin/node_modules/@arco-design/web-vue/es/tree/utils/check-utils.js"],"sourcesContent":["function SetAdd(set) {\n  return Set.prototype.add.bind(set);\n}\nfunction SetDelete(set) {\n  return Set.prototype.delete.bind(set);\n}\nfunction isNodeCheckable(node) {\n  if (node.disabled || node.disableCheckbox)\n    return false;\n  return !!node.checkable;\n}\nfunction getChildrenKeys(node) {\n  var _a;\n  const keys = [];\n  (_a = node.children) == null ? void 0 : _a.forEach((child) => {\n    if (isNodeCheckable(child)) {\n      keys.push(child.key, ...getChildrenKeys(child));\n    }\n  });\n  return keys;\n}\nfunction updateParent(options) {\n  var _a;\n  const { node, checkedKeySet, indeterminateKeySet } = options;\n  let parentNode = node.parent;\n  while (parentNode) {\n    if (isNodeCheckable(parentNode)) {\n      const parentKey = parentNode.key;\n      const children = ((_a = parentNode.children) == null ? void 0 : _a.filter(isNodeCheckable)) || [];\n      let checkedCount = 0;\n      const total = children.length;\n      children.some(({ key: childKey }) => {\n        if (checkedKeySet.has(childKey)) {\n          checkedCount += 1;\n        } else if (indeterminateKeySet.has(childKey)) {\n          checkedCount += 0.5;\n          return true;\n        }\n        return false;\n      });\n      if (checkedCount && checkedCount !== total) {\n        indeterminateKeySet.add(parentKey);\n      } else {\n        indeterminateKeySet.delete(parentKey);\n      }\n      if (checkedCount && checkedCount === total) {\n        checkedKeySet.add(parentKey);\n      } else {\n        checkedKeySet.delete(parentKey);\n      }\n    }\n    parentNode = parentNode.parent;\n  }\n}\nfunction getCheckedStateByCheck(options) {\n  const {\n    node,\n    checked,\n    checkedKeys,\n    indeterminateKeys,\n    checkStrictly = false\n  } = options;\n  const { key } = node;\n  const checkedKeySet = new Set(checkedKeys);\n  const indeterminateKeySet = new Set(indeterminateKeys);\n  checked ? checkedKeySet.add(key) : checkedKeySet.delete(key);\n  indeterminateKeySet.delete(key);\n  if (!checkStrictly) {\n    const childKeys = getChildrenKeys(node);\n    if (checked) {\n      childKeys.forEach(SetAdd(checkedKeySet));\n    } else {\n      childKeys.forEach(SetDelete(checkedKeySet));\n    }\n    childKeys.forEach(SetDelete(indeterminateKeySet));\n    updateParent({ node, checkedKeySet, indeterminateKeySet });\n  }\n  return [[...checkedKeySet], [...indeterminateKeySet]];\n}\nfunction getCheckedStateByInitKeys(options) {\n  const { initCheckedKeys, key2TreeNode, checkStrictly, onlyCheckLeaf } = options;\n  const checkedKeySet = new Set();\n  const childCheckedKeySet = new Set();\n  const indeterminateKeySet = new Set();\n  if (!checkStrictly) {\n    initCheckedKeys.forEach((key) => {\n      var _a;\n      const node = key2TreeNode.get(key);\n      if (!node || childCheckedKeySet.has(key) || onlyCheckLeaf && ((_a = node.children) == null ? void 0 : _a.length)) {\n        return;\n      }\n      const childKeys = getChildrenKeys(node);\n      childKeys.forEach(SetAdd(childCheckedKeySet));\n      childKeys.forEach(SetDelete(indeterminateKeySet));\n      checkedKeySet.add(key);\n      indeterminateKeySet.delete(key);\n      updateParent({ node, checkedKeySet, indeterminateKeySet });\n    });\n  } else {\n    initCheckedKeys.forEach(SetAdd(checkedKeySet));\n  }\n  return [[...checkedKeySet, ...childCheckedKeySet], [...indeterminateKeySet]];\n}\nexport { getCheckedStateByCheck, getCheckedStateByInitKeys, isNodeCheckable };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}