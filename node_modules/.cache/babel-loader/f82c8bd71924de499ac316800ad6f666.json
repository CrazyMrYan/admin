{"ast":null,"code":"import { toRefs, computed } from \"vue\";\nimport { getColumnsFromFormat } from \"../utils/index.js\";\n\nfunction useTimeFormat(props) {\n  const {\n    format: propFormat,\n    use12Hours: propUse12Hours,\n    defaultFormat\n  } = toRefs(props);\n  const format = computed(() => {\n    let res = (propFormat == null ? void 0 : propFormat.value) || (defaultFormat == null ? void 0 : defaultFormat.value);\n\n    if (!res || !getColumnsFromFormat(res).list.length) {\n      res = (propUse12Hours == null ? void 0 : propUse12Hours.value) ? \"hh:mm:ss a\" : \"HH:mm:ss\";\n    }\n\n    return res;\n  });\n  const configFromFormat = computed(() => getColumnsFromFormat(format.value));\n  const list = computed(() => configFromFormat.value.list);\n  const formatUse12Hours = computed(() => configFromFormat.value.use12Hours);\n  const computedUse12Hours = computed(() => !!((propUse12Hours == null ? void 0 : propUse12Hours.value) || formatUse12Hours.value));\n  return {\n    columns: list,\n    use12Hours: computedUse12Hours,\n    format\n  };\n}\n\nexport { useTimeFormat as default };","map":{"version":3,"names":["toRefs","computed","getColumnsFromFormat","useTimeFormat","props","format","propFormat","use12Hours","propUse12Hours","defaultFormat","res","value","list","length","configFromFormat","formatUse12Hours","computedUse12Hours","columns","default"],"sources":["/www/wwwroot/admin/node_modules/@arco-design/web-vue/es/time-picker/hooks/use-time-format.js"],"sourcesContent":["import { toRefs, computed } from \"vue\";\nimport { getColumnsFromFormat } from \"../utils/index.js\";\nfunction useTimeFormat(props) {\n  const {\n    format: propFormat,\n    use12Hours: propUse12Hours,\n    defaultFormat\n  } = toRefs(props);\n  const format = computed(() => {\n    let res = (propFormat == null ? void 0 : propFormat.value) || (defaultFormat == null ? void 0 : defaultFormat.value);\n    if (!res || !getColumnsFromFormat(res).list.length) {\n      res = (propUse12Hours == null ? void 0 : propUse12Hours.value) ? \"hh:mm:ss a\" : \"HH:mm:ss\";\n    }\n    return res;\n  });\n  const configFromFormat = computed(() => getColumnsFromFormat(format.value));\n  const list = computed(() => configFromFormat.value.list);\n  const formatUse12Hours = computed(() => configFromFormat.value.use12Hours);\n  const computedUse12Hours = computed(() => !!((propUse12Hours == null ? void 0 : propUse12Hours.value) || formatUse12Hours.value));\n  return {\n    columns: list,\n    use12Hours: computedUse12Hours,\n    format\n  };\n}\nexport { useTimeFormat as default };\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,KAAjC;AACA,SAASC,oBAAT,QAAqC,mBAArC;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EAC5B,MAAM;IACJC,MAAM,EAAEC,UADJ;IAEJC,UAAU,EAAEC,cAFR;IAGJC;EAHI,IAIFT,MAAM,CAACI,KAAD,CAJV;EAKA,MAAMC,MAAM,GAAGJ,QAAQ,CAAC,MAAM;IAC5B,IAAIS,GAAG,GAAG,CAACJ,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACK,KAA1C,MAAqDF,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACE,KAApG,CAAV;;IACA,IAAI,CAACD,GAAD,IAAQ,CAACR,oBAAoB,CAACQ,GAAD,CAApB,CAA0BE,IAA1B,CAA+BC,MAA5C,EAAoD;MAClDH,GAAG,GAAG,CAACF,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACG,KAAlD,IAA2D,YAA3D,GAA0E,UAAhF;IACD;;IACD,OAAOD,GAAP;EACD,CANsB,CAAvB;EAOA,MAAMI,gBAAgB,GAAGb,QAAQ,CAAC,MAAMC,oBAAoB,CAACG,MAAM,CAACM,KAAR,CAA3B,CAAjC;EACA,MAAMC,IAAI,GAAGX,QAAQ,CAAC,MAAMa,gBAAgB,CAACH,KAAjB,CAAuBC,IAA9B,CAArB;EACA,MAAMG,gBAAgB,GAAGd,QAAQ,CAAC,MAAMa,gBAAgB,CAACH,KAAjB,CAAuBJ,UAA9B,CAAjC;EACA,MAAMS,kBAAkB,GAAGf,QAAQ,CAAC,MAAM,CAAC,EAAE,CAACO,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,CAACG,KAAlD,KAA4DI,gBAAgB,CAACJ,KAA/E,CAAR,CAAnC;EACA,OAAO;IACLM,OAAO,EAAEL,IADJ;IAELL,UAAU,EAAES,kBAFP;IAGLX;EAHK,CAAP;AAKD;;AACD,SAASF,aAAa,IAAIe,OAA1B"},"metadata":{},"sourceType":"module"}